"""01 RAG context.

Revision ID: e19f013d6ac3
Revises:
Create Date: 2024-03-16 22:42:02.574774
"""
from collections.abc import Sequence
from typing import Union

import sqlalchemy as sa
from sqlalchemy.dialects import mysql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = 'e19f013d6ac3'
down_revision: str | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'blob',
        sa.Column('text', sa.String(), nullable=False),
        sa.Column('blob_index', sa.Integer(), nullable=False),
        sa.Column('vector_hex', sa.String(), nullable=False),
        sa.Column('id', sa.BigInteger().with_variant(mysql.BIGINT(), 'mysql').with_variant(sa.BIGINT(), 'postgresql').with_variant(sa.INTEGER(), 'sqlite'), autoincrement=True, nullable=False),
        sa.Column('created', sa.DateTime(timezone=True), nullable=True),
        sa.Column('updated', sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint('id'),
    )
    with op.batch_alter_table('blob', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_blob_created'), ['created'], unique=False)

    op.create_table(
        'context',
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('id', sa.BigInteger().with_variant(mysql.BIGINT(), 'mysql').with_variant(sa.BIGINT(), 'postgresql').with_variant(sa.INTEGER(), 'sqlite'), autoincrement=True, nullable=False),
        sa.Column('created', sa.DateTime(timezone=True), nullable=True),
        sa.Column('updated', sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint('id'),
    )
    with op.batch_alter_table('context', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_context_created'), ['created'], unique=False)
        batch_op.create_index(batch_op.f('ix_context_name'), ['name'], unique=True)

    op.create_table(
        'source',
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('hash', sa.String(), nullable=False),
        sa.Column('id', sa.BigInteger().with_variant(mysql.BIGINT(), 'mysql').with_variant(sa.BIGINT(), 'postgresql').with_variant(sa.INTEGER(), 'sqlite'), autoincrement=True, nullable=False),
        sa.Column('created', sa.DateTime(timezone=True), nullable=True),
        sa.Column('updated', sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint('id'),
    )
    with op.batch_alter_table('source', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_source_created'), ['created'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('source', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_source_created'))

    op.drop_table('source')
    with op.batch_alter_table('context', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_context_name'))
        batch_op.drop_index(batch_op.f('ix_context_created'))

    op.drop_table('context')
    with op.batch_alter_table('blob', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_blob_created'))

    op.drop_table('blob')
    # ### end Alembic commands ###
